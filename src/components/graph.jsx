import React, { useEffect, useRef, useState } from "react";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);
import domtoimage from "dom-to-image";
import jsPDF from "jspdf";
import PropTypes from "prop-types";

const GraphContain = (p) => {
  const chartRef = useRef();
  const containerRef = useRef();
  const [isChartReady, setIsChartReady] = useState(false);
  const [hasSaved, setHasSaved] = useState(false);
  const [count, setCount] = useState(0);
  // console.log(p.saveTrick);

  const saveChartAsPDF = () => {
    console.log("save");
    const chartContainer = containerRef.current;
    // console.log(!containerRef.current);
    // console.log(!isChartReady);
    // console.log(p.SC === localStorage.getItem("rendered"));
    if (
      // !isChartReady ||
      // !chartContainer ||
      p.SC === localStorage.getItem("rendered")
    ) {
      console.log(
        "Chart is not ready , chart container is missing or this Serial is save. Exiting..."
      );
      return;
    }
    console.log("test");

    domtoimage
      .toPng(chartContainer)
      .then((dataUrl) => {
        const pdf = new jsPDF("p", "mm", "a4");
        const pageWidth = 290;
        const pageHeight = 297;
        console.log(dataUrl);

        // เพิ่มหัวข้อ
        pdf.setFontSize(16);
        pdf.text(`Test Result`, 15, 20);
        pdf.setFontSize(8);
        pdf.text(`${p.SC}`, 15, 25);

        // เพิ่มรายละเอียด
        pdf.setFontSize(8);
        pdf.text(`CurrentMin : ${p.lCurrent} mA`, 15, 35);
        pdf.text(`CurrentMax : ${p.uCurrent} mA`, 55, 35);
        pdf.text(`CurrentResult : ${p.rCurrent} mA`, 95, 35);
        pdf.text(`SensitivityMin : ${p.lSensitivity} dBV/Pa`, 15, 40);
        pdf.text(`SensitivityMax : ${p.uSensitivity} dBV/Pa`, 55, 40);
        pdf.text(`SensitivityResult : ${p.rSensitivity} dBV/Pa`, 95, 40);
        pdf.text(`THD Min: ${p.lThd106} %`, 15, 45);
        pdf.text(`THD Max: ${p.uThd106} %`, 55, 45);
        pdf.text(`THD Result: ${p.rThd106} %`, 95, 45);
        function setTextColorBasedOnValue(value) {
          if (value.toUpperCase() === "FAIL") {
            pdf.setTextColor(255, 0, 0);
          } else if (value.toUpperCase() === "PASS") {
            pdf.setTextColor(39, 161, 20);
          } else {
            pdf.setTextColor(0, 0, 0);
          }
        }
        setTextColorBasedOnValue(p.sCurrent);
        pdf.text(`${p.sCurrent.toUpperCase()}`, 150, 35);

        setTextColorBasedOnValue(p.sSensitivity);
        pdf.text(`${p.sSensitivity.toUpperCase()}`, 150, 40);
        setTextColorBasedOnValue(p.sThd106);
        pdf.text(`${p.sThd106.toUpperCase()}`, 150, 45);
        setTextColorBasedOnValue(p.Frequency);
        pdf.text(`${p.Frequency.toUpperCase()}`, 45, 50);
        pdf.setTextColor(0, 0, 0);
        pdf.text(`Frequency Response :`, 15, 50);
        // เพิ่มกราฟ
        const imgWidth = 150;
        const imgHeight =
          (chartContainer.offsetHeight * imgWidth) / chartContainer.offsetWidth;
        pdf.addImage(dataUrl, "PNG", 30, 60, imgWidth, imgHeight);

        // เพิ่ม Footer
        pdf.setFontSize(10);
        pdf.text("19122024", 10, pageHeight - 20);
        pdf.text("v.1.0.3.3", pageWidth - 50, pageHeight - 20);
        // บันทึกไฟล์
        // pdf.addImage(dataUrl, "PNG", 0, 10, imgWidth, imgHeight);
        pdf.save(`_${p.SC}.pdf`);
        localStorage.setItem("rendered", p.SC);
        localStorage.setItem("fResult", p.result);
      })
      .catch((error) => {
        console.error("Failed to generate PDF:", error);
      });
  };

  const Frequency = [
    78.125, 78.99801204, 79.8807796, 80.7734117, 81.67601856, 82.58871165,
    83.51160367, 84.44480861, 85.38844169, 86.34261945, 87.30745973,
    88.28308166, 89.26960574, 90.26715378, 91.27584897, 92.29581589,
    93.32718047, 94.3700701, 95.42461356, 96.49094107, 97.56918431, 98.65947644,
    99.7619521, 100.8767474, 102.0040001, 103.1438493, 104.2964359, 105.461902,
    106.6403917, 107.8320506, 109.0370257, 110.2554658, 111.4875215,
    112.7333448, 113.9930897, 115.2669116, 116.554968, 117.8574178, 119.1744219,
    120.5061429, 121.8527453, 123.2143954, 124.5912613, 125.9835131,
    127.3913227, 128.8148639, 130.2543126, 131.7098465, 133.1816453,
    134.6698908, 136.1747668, 137.6964591, 139.2351556, 140.7910464,
    142.3643235, 143.9551814, 145.5638164, 147.1904271, 148.8352145,
    150.4983816, 152.180134, 153.8806791, 155.6002271, 157.3389902, 159.0971833,
    160.8750234, 162.67273, 164.4905253, 166.3286335, 168.1872819, 170.0666997,
    171.9671193, 173.8887752, 175.8319047, 177.7967478, 179.7835472,
    181.7925482, 183.8239988, 185.8781501, 187.9552555, 190.0555717, 192.179358,
    194.3268766, 196.4983928, 198.6941747, 200.9144935, 203.1596234,
    205.4298416, 207.7254285, 210.0466675, 212.3938454, 214.7672519,
    217.1671802, 219.5939266, 222.0477908, 224.5290759, 227.0380882,
    229.5751376, 232.1405374, 234.7346044, 237.3576589, 240.0100249,
    242.6920299, 245.4040052, 248.1462855, 250.9192096, 253.7231199,
    256.5583626, 259.4252879, 262.3242498, 265.2556064, 268.2197195,
    271.2169553, 274.2476838, 277.3122794, 280.4111205, 283.5445897,
    286.7130741, 289.9169648, 293.1566577, 296.4325526, 299.7450542,
    303.0945715, 306.4815182, 309.9063125, 313.3693774, 316.8711405,
    320.4120342, 323.9924958, 327.6129675, 331.2738963, 334.9757344,
    338.7189388, 342.503972, 346.3313011, 350.201399, 354.1147435, 358.0718178,
    362.0731107, 366.1191163, 370.2103342, 374.3472696, 378.5304334,
    382.7603422, 387.0375184, 391.3624901, 395.7357914, 400.1579624,
    404.6295493, 409.151104, 413.7231852, 418.3463573, 423.0211913, 427.7482645,
    432.5281607, 437.36147, 442.2487894, 447.1907224, 452.1878794, 457.2408773,
    462.3503402, 467.5168991, 472.741192, 478.0238641, 483.3655676, 488.7669623,
    494.2287152, 499.7515007, 505.3360009, 510.9829054, 516.6929115,
    522.4667244, 528.3050571, 534.2086305, 540.1781738, 546.214424, 552.3181267,
    558.4900355, 564.7309126, 571.0415287, 577.4226632, 583.875104, 590.3996479,
    596.9971008, 603.6682772, 610.414001, 617.2351053, 624.1324324, 631.106834,
    638.1591715, 645.2903157, 652.5011472, 659.7925566, 667.1654443,
    674.6207206, 682.1593064, 689.7821325, 697.4901402, 705.2842815,
    713.1655189, 721.1348256, 729.1931857, 737.3415945, 745.581058, 753.9125939,
    762.337231, 770.8560096, 779.4699818, 788.1802113, 796.9877737, 805.8937567,
    814.8992601, 824.005396, 833.2132889, 842.5240759, 851.9389068, 861.4589442,
    871.0853638, 880.8193543, 890.6621179, 900.6148699, 910.6788395,
    920.8552695, 931.1454165, 941.5505514, 952.071959, 962.7109386, 973.4688041,
    984.3468839, 995.3465214, 1006.469075, 1017.715918, 1029.08844, 1040.588044,
    1052.216152, 1063.974198, 1075.863635, 1087.885932, 1100.042572,
    1112.335057, 1124.764905, 1137.333652, 1150.042848, 1162.894064,
    1175.888887, 1189.028921, 1202.315789, 1215.751132, 1229.336609,
    1243.073897, 1256.964694, 1271.010714, 1285.213692, 1299.575381,
    1314.097557, 1328.782011, 1343.630558, 1358.64503, 1373.827282, 1389.17919,
    1404.702648, 1420.399574, 1436.271905, 1452.321604, 1468.55065, 1484.961049,
    1501.554826, 1518.334032, 1535.300738, 1552.457039, 1569.805054,
    1587.346926, 1605.08482, 1623.020927, 1641.157462, 1659.496665, 1678.0408,
    1696.792158, 1715.753054, 1734.925829, 1754.312852, 1773.916516,
    1793.739242, 1813.783478, 1834.0517, 1854.54641, 1875.270139, 1896.225447,
    1917.41492, 1938.841177, 1960.506863, 1982.414653, 2004.567253, 2026.967398,
    2049.617855, 2072.52142, 2095.680923, 2119.099223, 2142.779212, 2166.723814,
    2190.935987, 2215.41872, 2240.175036, 2265.207993, 2290.520682, 2316.11623,
    2341.997796, 2368.168577, 2394.631805, 2421.390748, 2448.44871, 2475.809032,
    2503.475094, 2531.450312, 2559.738141, 2588.342073, 2617.265642,
    2646.512418, 2676.086014, 2705.990082, 2736.228315, 2766.804446,
    2797.722252, 2828.985551, 2860.598203, 2892.564113, 2924.887227,
    2957.571538, 2990.621081, 3024.039938, 3057.832236, 3092.002148,
    3126.553893, 3161.491739, 3196.819999, 3232.543037, 3268.665264,
    3305.191141, 3342.125179, 3379.471937, 3417.236029, 3455.422118, 3494.03492,
    3533.079202, 3572.559787, 3612.481549, 3652.84942, 3693.668384, 3734.943481,
    3776.679809, 3818.882522, 3861.556831, 3904.708007, 3948.341378,
    3992.462332, 4037.076319, 4082.188846, 4127.805487, 4173.931872, 4220.5737,
    4267.736729, 4315.426784, 4363.649754, 4412.411595, 4461.718327, 4511.57604,
    4561.99089, 4612.969105, 4664.516977, 4716.640875, 4769.347234, 4822.642562,
    4876.533443, 4931.026529, 4986.128552, 5041.846316, 5098.1867, 5155.156663,
    5212.76324, 5271.013545, 5329.914772, 5389.474193, 5449.699164, 5510.597122,
    5572.175588, 5634.442165, 5697.404544, 5761.0705, 5825.447894, 5890.544676,
    5956.368887, 6022.928653, 6090.232195, 6158.287825, 6227.103945,
    6296.689055, 6367.051748, 6438.200712, 6510.144734, 6582.892699, 6656.45359,
    6730.836491, 6806.050587, 6882.105168, 6959.009625, 7036.773454, 7115.40626,
    7194.917752, 7275.31775, 7356.616182, 7438.823088, 7521.948619, 7606.003041,
    7690.996733, 7776.940193, 7863.844032, 7951.718982, 8040.575896,
    8130.425747, 8221.279629, 8313.148764, 8406.044494, 8499.978293,
    8594.961761, 8691.006626, 8788.12475, 8886.328126, 8985.62888, 9086.039276,
    9187.571714, 9290.238731, 9394.053007, 9499.027361, 9605.174756,
    9712.508301, 9821.041251, 9930.787008, 10041.75912, 10153.97131,
    10267.43741, 10382.17144, 10498.18758, 10615.50014, 10734.12362,
    10854.07267, 10975.36209, 11098.00687, 11222.02215, 11347.42324,
    11474.22564, 11602.44499, 11732.09714, 11863.1981, 11995.76405, 12129.81136,
    12265.35659, 12402.41648, 12541.00796, 12681.14813, 12822.85431,
    12966.14399, 13111.03486, 13257.54483, 13405.69199, 13555.49462,
    13706.97122, 13860.14052, 14015.02141, 14171.63302, 14329.9947, 14490.126,
    14652.0467, 14815.77679, 14981.33649, 15148.74624, 15318.02673, 15489.19885,
    15662.28374, 15837.30277, 16014.27757, 16193.22998, 16374.18211,
    16557.15629, 16742.17513, 16929.26147, 17118.43842, 17309.72934,
    17503.15785, 17698.74783, 17896.52345, 18096.50912, 18298.72954,
    18503.20968, 18709.9748, 18919.05042, 19130.46238, 19344.23676, 19560.39998,
    19778.97873, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000,
    1000000,
  ];
  // console.log(p);

  const Labels = Frequency.map((num) => Math.floor(num));
  const data = {
    labels: Labels,
    datasets: [
      {
        label: "Result",
        data: p.result,
        borderColor: "blue",
        tension: 0.2,
      },
      {
        label: "Lower",
        data: [
          -10, -10, -10, -9.825, -9.65, -9.475, -9.3, -9.125, -8.95, -8.775,
          -8.6, -8.425, -8.25, -8.075, -7.9, -7.725, -7.55, -7.375, -7.2,
          -7.025, -6.85, -6.675, -6.5, -6.325, -6.15, -5.975, -5.8, -5.625,
          -5.45, -5.275, -5.1, -4.925, -4.75, -4.575, -4.4, -4.225, -4.05,
          -3.875, -3.7, -3.525, -3.35, -3.175, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
          -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3.15, -3.3, -3.45,
          -3.6, -3.75, -3.9, -4.05, -4.2, -4.35, -4.5, -4.65, -4.8, -4.95, -5.1,
          -5.25, -5.4, -5.55, -5.7, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
          -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
          -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
          -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
          -6,
        ],
        borderColor: "red",
      },
      {
        label: "Upper",
        data: [
          -3, -3, -3, -2.845, -2.69, -2.535, -2.38, -2.225, -2.07, -1.915,
          -1.76, -1.605, -1.45, -1.295, -1.14, -0.985, -0.83, -0.675, -0.52,
          -0.365, -0.21, -0.055, 0.1, 0.255, 0.41, 0.565, 0.72, 0.875, 1.03,
          1.185, 1.34, 1.495, 1.65, 1.805, 1.96, 2.115, 2.27, 2.425, 2.58,
          2.735, 2.89, 3.045, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3.35, 3.7, 4.05, 4.4, 4.75,
          5.1, 5.45, 5.8, 6.15, 6.5, 6.85, 7.2, 7.55, 7.9, 8.25, 8.6, 8.95, 9.3,
          9.65, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
          10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        ],
        borderColor: "red",
      },
    ],
  };
  const cfg = {
    responsive: true,
    plugins: {
      legend: {
        position: "bottom",
      },
      title: {
        display: true,
        text: "Frequency Response",
      },
    },
    tooltip: {
      enabled: true,
    },
    animation: {
      duration: 0,
      onComplete: () => {
        console.log(`Chart ${p.SC} render complete!`);
        setIsChartReady(true);
      },
    },
    scales: {
      x: {
        beginAtZero: true,
        title: {
          display: true,
          text: "Frequency (Hz)",
        },
      },
      y: {
        beginAtZero: true,
        ticks: {
          stepSize: 2.5,
        },
        title: {
          display: true,
          text: "Amplitude (dB)",
        },
      },
    },
    elements: {
      point: {
        radius: 0,
      },
    },
  };
  useEffect(() => {
    setCount((prev) => prev + 1);
    console.log(count);
  }, []);

  useEffect(() => {
    console.log(chartRef.current);
    console.log(p.result.length);

    if (
      p.SC !== localStorage.getItem("rendered") &&
      p.result.length > 0 &&
      p.result !== localStorage.getItem("fResult")
    ) {
      console.log("rendering chart");
    }
    if (chartRef.current) {
      console.log(isChartReady);
      if (!isChartReady) {
        return;
      } else {
        saveChartAsPDF();
      }
    }
  }, [isChartReady, p.SC, p.result]);
  // console.log(p.saveTrick);
  // console.log(p.saveTrick === true);
  // console.log(isChartReady);
  // console.log(p.saveTrick === true && isChartReady === true);

  // if (p.saveTrick === true&& isChartReady === true) {
  //   console.log(123);
  //   saveChartAsPDF();
  // }
  return (
    <>
      <div
        ref={containerRef}
        style={{ width: "800px", height: "500px", background: "white" }}
      >
        <Line ref={chartRef} options={cfg} data={data} />
      </div>
      <button onClick={saveChartAsPDF}>Save as PDF</button>
    </>
  );
};
GraphContain.propTypes = {
  p: PropTypes.shape({
    SC: PropTypes.string,
    lCurrent: PropTypes.string,
    uCurrent: PropTypes.string,
    rCurrent: PropTypes.string,
    lSensitivity: PropTypes.string,
    uSensitivity: PropTypes.string,
    rSensitivity: PropTypes.string,
    lThd106: PropTypes.string,
    uThd106: PropTypes.string,
    rThd106: PropTypes.string,
    Frequency: PropTypes.string,
  }),
};

export default GraphContain;
